# This holds the tempaltes used to identify leafs and next hit to traverge when using a graph
#   for track identification.
#   The syntax is the following:
#   First row defines whether it is a template for a Leaf or a stop condition - Leaf or StopNode respectively.
#   We use local hits, this the cubes size is 3x3x3 with the current hit in the middle.
#   To define the template the first 9 are the cubes at Z-1 coordinates, than at Z and than at Z+1.
#   'O' (letter O) or '-' is used for no hit, 'X' is for hit, 'P' is used in GetNextNode templates to denote previous node
#   , 'C' denotes center cube position. ONE space is used to separate the matrixes

#   Hits with one nearby hits are considered leaves by default. The leaves with
#   One hit are listed here for completion.

# This is the initial position, to match 23 permutations of the defined templare are made
#   in X,Y,Z axis to covered all possibilities


#########################################################
#######                  Permutations             #######
#########################################################
#
#        The following are the permutations used for each templates
#        defined for Leaves and GetNextNodes - vec is a TVector3 object
#        and the cases below show which rotations are used for the permutations.
#
#        case 0:
#                // No rotation
#                break;
#        case 1:
#                vec.RotateZ(rot90deg);
#                break;
#        case 2:
#                vec.RotateZ(2*rot90deg);
#                break;
#        case 3:
#                vec.RotateZ(3*rot90deg);
#                break;
#        case 4:
#                vec.RotateY(rot90deg);
#                break;
#        case 5:
#                vec.RotateY(rot90deg);
#                vec.RotateX(rot90deg);
#                break;
#        case 6:
#                vec.RotateY(rot90deg);
#                vec.RotateX(2*rot90deg);
#                break;
#        case 7:
#                vec.RotateY(rot90deg);
#                vec.RotateX(3*rot90deg);
#                break;
#        case 8:
#                vec.RotateY(2*rot90deg);
#                break;
#        case 9:
#                vec.RotateY(2*rot90deg);
#                vec.RotateZ(rot90deg);
#                break;
#        case 10:
#                vec.RotateY(2*rot90deg);
#                vec.RotateZ(2*rot90deg);
#                break;
#        case 11:
#                vec.RotateY(2*rot90deg);
#                vec.RotateZ(3*rot90deg);
#                break;
#        case 12:
#                vec.RotateY(3*rot90deg);
#                break;
#        case 13:
#                vec.RotateY(3*rot90deg);
#                vec.RotateX(rot90deg);
#                break;
#        case 14:
#                vec.RotateY(3*rot90deg);
#                vec.RotateX(2*rot90deg);
#                break;
#        case 15:
#                vec.RotateY(3*rot90deg);
#                vec.RotateX(3*rot90deg);
#                break;
#        case 16:
#                vec.RotateX(rot90deg);
#                break;
#        case 17:
#                vec.RotateX(rot90deg);
#                vec.RotateY(rot90deg);
#                break;
#        case 18:
#                vec.RotateX(rot90deg);
#                vec.RotateY(2*rot90deg);
#                break;
#        case 19:
#                vec.RotateX(rot90deg);
#                vec.RotateY(3*rot90deg);
#                break;
#        case 20:
#                vec.RotateX(-rot90deg);
#                break;
#        case 21:
#                vec.RotateX(-rot90deg);
#                vec.RotateY(rot90deg);
#                break;
#        case 22:
#                vec.RotateX(-rot90deg);
#                vec.RotateY(2*rot90deg);
#                break;
#        case 23:
#                vec.RotateX(-rot90deg);
#                vec.RotateY(3*rot90deg);
#                break;

#########################################################
#######                   Leaves                  #######
#########################################################
#Leaf 
--- --- ---
--- -C- -X-
--- --- ---

#Leaf 
--- --- -X-
--- -C- ---
--- --- ---

#Leaf 
--- --- --X
--- -C- ---
--- --- ---

Leaf 
--- --- -X-
--- -C- -X-
--- --- ---

Leaf 
--- --- --X
--- -C- -X-
--- --- ---

Leaf 
--- --- -XX
--- -C- -X-
--- --- ---

Leaf 
--- --- XX-
--- -C- -X-
--- --- ---

Leaf 
--- --- X--
--- -C- X--
--- --- ---

Leaf 
--- --- --X
--- -C- --X
--- --- ---

#########################################################
#######          Stop condition Nodes             #######
#########################################################

